/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.estadisticasnba;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.swing.JOptionPane;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author nacho
 */
public class NBA extends javax.swing.JFrame {
    

    /**
     * Creates new form NBA
     */
    public NBA() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void procesarEstadisticasJugador() {
    try {
        String nombreJugador = (String) NombreJugador1.getText().trim();  // Eliminar espacios al principio y final

        // Obtener los valores de los spinners
        int tirosRealizados2 = (int) tiros_realizados_2_spinner.getValue();
        int tirosRealizados3 = (int) tiros_realizados_3_spinner.getValue();
        int tirosLibresRealizados = (int) tiros_realizados_libres_spinner.getValue();
        int tirosEncestados2 = (int) tiros_encestados_2_spnnier.getValue();
         int tirosEncestados3 = (int) tiros_encestados_3_spinner.getValue();
        int tirosLibresEncestados = (int) tiros_encestados_libres_spinner.getValue();

        // Validaciones
        if (nombreJugador.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Por favor, ingrese un nombre válido para el jugador.");
            return;
        }

        if (tirosEncestados2 > tirosRealizados2 || tirosEncestados3 > tirosRealizados3 || tirosLibresEncestados > tirosLibresRealizados) {
            JOptionPane.showMessageDialog(null, "Los tiros encestados no pueden superar los tiros realizados.");
            return;
        }

        int totalTiros = tirosRealizados2 + tirosRealizados3 + tirosLibresRealizados;
        if (totalTiros == 0) {
            JOptionPane.showMessageDialog(null, "El total de tiros realizados no puede ser 0.");
            return;
        }

        // Cálculos de estadísticas
        double porcentajeCampo = 0;
        double porcentajeEfectivo = 0;
        double porcentajeLibres = 0;
        int puntosTotales = (tirosEncestados2 * 2) + (tirosEncestados3 * 3) + tirosLibresEncestados;

        // Evitar división por cero
        if (tirosRealizados2 + tirosRealizados3 > 0) {
            porcentajeCampo = ((double) (tirosEncestados2 + tirosEncestados3) / (tirosRealizados2 + tirosRealizados3)) * 100;
            porcentajeEfectivo = ((double) (tirosEncestados2 + 1.5 * tirosEncestados3) / (tirosRealizados2 + tirosRealizados3)) * 100;
        }
        if (tirosLibresRealizados > 0) {
            porcentajeLibres = ((double) tirosLibresEncestados / tirosLibresRealizados) * 100;
        }

        // Guardar en archivo Excel
        String rutaArchivo = "C:\\Users\\nacho\\OneDrive\\Desarrollo de interzaces\\NETBEANS\\EstadisticasNBA\\EstadisticasNBA.xlsx";
        exportarEstadisticasExcel(rutaArchivo, nombreJugador, tirosRealizados2 + tirosRealizados3, tirosEncestados2, tirosEncestados3, 
                                  tirosLibresRealizados, tirosLibresEncestados, puntosTotales, porcentajeCampo, porcentajeEfectivo, porcentajeLibres);

        JOptionPane.showMessageDialog(null, "Estadísticas procesadas y guardadas correctamente en: " + rutaArchivo);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error al procesar estadísticas: " + e.getMessage());
    }
}
private void exportarEstadisticasExcel(String ruta, String jugador, double tirosTotales, double tirosEncestados2, double tirosEncestados3,
                                       double libresRealizados, double libresEncestados, double puntosTotales, double fg, double efg, double libres) throws IOException {
    Workbook libroExcel;
    Sheet hoja;

    // Comprobar si el archivo Excel existe para registrar datos nuevos sin sobreescribirlo
    File archivoExcel = new File(ruta);
    if (archivoExcel.exists()) {
        try (FileInputStream fis = new FileInputStream(archivoExcel)) {
            libroExcel = new XSSFWorkbook(fis);
            hoja = libroExcel.getSheet("Estadísticas");
            if (hoja == null) {
                hoja = libroExcel.createSheet("Estadísticas");
            }
        }
    } else {
        libroExcel = new XSSFWorkbook();
        hoja = libroExcel.createSheet("Estadísticas");
    }

    // Eliminar la fila de "MEDIA" previa si existe
    for (int i = 1; i <= hoja.getLastRowNum(); i++) {
        Row filaActual = hoja.getRow(i);
        if (filaActual != null) {
            Cell primeraCelda = filaActual.getCell(0);
            if (primeraCelda != null && primeraCelda.getCellType() == CellType.STRING) {
                if ("MEDIA".equals(primeraCelda.getStringCellValue())) {
                    hoja.removeRow(filaActual);
                }
            }
        }
    }

    // Buscar la próxima fila disponible
    int ultimaFila = hoja.getLastRowNum();
    Row fila;

    // Crear encabezados si el archivo es nuevo
    Row encabezado = hoja.getRow(0);
    if (encabezado == null) {
        fila = hoja.createRow(0);
        fila.createCell(0).setCellValue("Nombre del Jugador");
        fila.createCell(1).setCellValue("Tiros Realizados");
        fila.createCell(2).setCellValue("Tiros Metidos de 2");
        fila.createCell(3).setCellValue("Tiros Metidos de 3");
        fila.createCell(4).setCellValue("Tiros Libres Hechos");
        fila.createCell(5).setCellValue("Tiros Libres Metidos");
        fila.createCell(6).setCellValue("Puntos Totales");
        fila.createCell(7).setCellValue("% FG");
        fila.createCell(8).setCellValue("% eFG");
        fila.createCell(9).setCellValue("% Libres");
        ultimaFila++;
    }

    // Filas con los datos recogidos
    fila = hoja.createRow(ultimaFila + 1);
    fila.createCell(0).setCellValue(jugador);
    fila.createCell(1).setCellValue(tirosTotales);
    fila.createCell(2).setCellValue(tirosEncestados2);
    fila.createCell(3).setCellValue(tirosEncestados3);
    fila.createCell(4).setCellValue(libresRealizados);
    fila.createCell(5).setCellValue(libresEncestados);
    fila.createCell(6).setCellValue(puntosTotales);
    fila.createCell(7).setCellValue(fg);
    fila.createCell(8).setCellValue(efg);
    fila.createCell(9).setCellValue(libres);

    // Escribir la media en la última fila del Excel
    Row filaMedia = hoja.createRow(ultimaFila + 2);
    filaMedia.createCell(0).setCellValue("MEDIA");

    for (int col = 1; col <= 9; col++) {
        double suma = 0.0;
        int filasDatos = 0;

        // Sumar los valores de cada columna
        for (int i = 1; i <= ultimaFila + 1; i++) {
            Row filaDatos = hoja.getRow(i);
            if (filaDatos != null) {
                Cell celda = filaDatos.getCell(col);
                if (celda != null && celda.getCellType() == CellType.NUMERIC) {
                    suma += celda.getNumericCellValue();
                    filasDatos++;
                }
            }
        }

        double media = (filasDatos > 0) ? suma / filasDatos : 0.0;
        Cell celdaMedia = filaMedia.createCell(col);
        celdaMedia.setCellValue(media);
    }

    // Ajustar el tamaño de las celdas
    for (int i = 0; i <= 9; i++) {
        hoja.autoSizeColumn(i);
    }

    // Escribir el documento Excel
    try (FileOutputStream archivo = new FileOutputStream(ruta)) {
        libroExcel.write(archivo);
    }

    libroExcel.close();  // Cerrar el libro de trabajo
}


    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        NombreJugador = new javax.swing.JTextField();
        anotados2 = new javax.swing.JSpinner();
        anotados8 = new javax.swing.JSpinner();
        nombre_jugador = new javax.swing.JLabel();
        NombreJugador1 = new javax.swing.JTextField();
        tiros_encestados_3 = new javax.swing.JLabel();
        tiros_realizados_3_spinner = new javax.swing.JSpinner();
        tiros_realizados_3 = new javax.swing.JLabel();
        tiros_encestados_3_spinner = new javax.swing.JSpinner();
        tiros_realizados_2 = new javax.swing.JLabel();
        tiros_encestados_2_spinner = new javax.swing.JLabel();
        tiros_libres_encestados = new javax.swing.JLabel();
        tiros_libres_realizados = new javax.swing.JLabel();
        tiros_encestados_2_spnnier = new javax.swing.JSpinner();
        tiros_realizados_2_spinner = new javax.swing.JSpinner();
        tiros_encestados_libres_spinner = new javax.swing.JSpinner();
        tiros_realizados_libres_spinner = new javax.swing.JSpinner();
        Guardar = new javax.swing.JButton();

        NombreJugador.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NombreJugador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NombreJugadorActionPerformed(evt);
            }
        });

        anotados2.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
        anotados2.setPreferredSize(new java.awt.Dimension(64, 30));

        anotados8.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
        anotados8.setPreferredSize(new java.awt.Dimension(64, 30));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        nombre_jugador.setText("Nombre del Jugador");

        NombreJugador1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NombreJugador1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NombreJugador1ActionPerformed(evt);
            }
        });

        tiros_encestados_3.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        tiros_encestados_3.setText("Tiros encestados de 3");

        tiros_realizados_3_spinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
        tiros_realizados_3_spinner.setPreferredSize(new java.awt.Dimension(64, 30));

        tiros_realizados_3.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        tiros_realizados_3.setText("Tiros realizados de 3");

        tiros_encestados_3_spinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
        tiros_encestados_3_spinner.setPreferredSize(new java.awt.Dimension(64, 30));

        tiros_realizados_2.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        tiros_realizados_2.setText("Tiros realizados de 2");

        tiros_encestados_2_spinner.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        tiros_encestados_2_spinner.setText("Tiros encestados de 2");

        tiros_libres_encestados.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        tiros_libres_encestados.setText("Tiros libres encestados");

        tiros_libres_realizados.setFont(new java.awt.Font("Microsoft JhengHei UI", 0, 12)); // NOI18N
        tiros_libres_realizados.setText("Tiros libres realizados");

        tiros_encestados_2_spnnier.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
        tiros_encestados_2_spnnier.setPreferredSize(new java.awt.Dimension(64, 30));

        tiros_realizados_2_spinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
        tiros_realizados_2_spinner.setPreferredSize(new java.awt.Dimension(64, 30));

        tiros_encestados_libres_spinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
        tiros_encestados_libres_spinner.setPreferredSize(new java.awt.Dimension(64, 30));

        tiros_realizados_libres_spinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));
        tiros_realizados_libres_spinner.setPreferredSize(new java.awt.Dimension(64, 30));

        Guardar.setText("Guadar");
        Guardar.setPreferredSize(new java.awt.Dimension(72, 30));
        Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tiros_encestados_2_spinner, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(tiros_realizados_3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(nombre_jugador, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tiros_encestados_3, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(NombreJugador1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tiros_realizados_3_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tiros_encestados_3_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tiros_encestados_2_spnnier, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(tiros_libres_realizados, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(tiros_libres_encestados, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                                    .addComponent(tiros_realizados_2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tiros_realizados_2_spinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tiros_encestados_libres_spinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tiros_realizados_libres_spinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(Guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombre_jugador, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NombreJugador1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tiros_encestados_3)
                    .addComponent(tiros_encestados_3_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tiros_realizados_3)
                    .addComponent(tiros_realizados_3_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tiros_encestados_2_spinner)
                    .addComponent(tiros_encestados_2_spnnier, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tiros_realizados_2)
                    .addComponent(tiros_realizados_2_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tiros_libres_encestados)
                    .addComponent(tiros_encestados_libres_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tiros_libres_realizados)
                    .addComponent(tiros_realizados_libres_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(Guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NombreJugadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NombreJugadorActionPerformed
     
    }//GEN-LAST:event_NombreJugadorActionPerformed

    private void NombreJugador1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NombreJugador1ActionPerformed
      
    }//GEN-LAST:event_NombreJugador1ActionPerformed

    private void GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarActionPerformed
          procesarEstadisticasJugador();
    }//GEN-LAST:event_GuardarActionPerformed

 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NBA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NBA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NBA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NBA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NBA().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Guardar;
    private javax.swing.JTextField NombreJugador;
    private javax.swing.JTextField NombreJugador1;
    private javax.swing.JSpinner anotados2;
    private javax.swing.JSpinner anotados8;
    private javax.swing.JLabel nombre_jugador;
    private javax.swing.JLabel tiros_encestados_2_spinner;
    private javax.swing.JSpinner tiros_encestados_2_spnnier;
    private javax.swing.JLabel tiros_encestados_3;
    private javax.swing.JSpinner tiros_encestados_3_spinner;
    private javax.swing.JSpinner tiros_encestados_libres_spinner;
    private javax.swing.JLabel tiros_libres_encestados;
    private javax.swing.JLabel tiros_libres_realizados;
    private javax.swing.JLabel tiros_realizados_2;
    private javax.swing.JSpinner tiros_realizados_2_spinner;
    private javax.swing.JLabel tiros_realizados_3;
    private javax.swing.JSpinner tiros_realizados_3_spinner;
    private javax.swing.JSpinner tiros_realizados_libres_spinner;
    // End of variables declaration//GEN-END:variables
}
